/*
 * This file is generated by jOOQ.
 */
package org.db.flyway.tables;


import java.util.Arrays;
import java.util.List;

import org.db.flyway.Keys;
import org.db.flyway.RegistrationApp;
import org.db.flyway.tables.records.RunnerRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Runner extends TableImpl<RunnerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>registration_app.runner</code>
     */
    public static final Runner RUNNER = new Runner();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RunnerRecord> getRecordType() {
        return RunnerRecord.class;
    }

    /**
     * The column <code>registration_app.runner.id</code>.
     */
    public final TableField<RunnerRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>registration_app.runner.name</code>.
     */
    public final TableField<RunnerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>registration_app.runner.b_day</code>.
     */
    public final TableField<RunnerRecord, String> B_DAY = createField(DSL.name("b_day"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>registration_app.runner.mobile</code>.
     */
    public final TableField<RunnerRecord, String> MOBILE = createField(DSL.name("mobile"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>registration_app.runner.address</code>.
     */
    public final TableField<RunnerRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>registration_app.runner.gender</code>.
     */
    public final TableField<RunnerRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>registration_app.runner.race</code>.
     */
    public final TableField<RunnerRecord, String> RACE = createField(DSL.name("race"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>registration_app.runner.tshirt_size</code>.
     */
    public final TableField<RunnerRecord, String> TSHIRT_SIZE = createField(DSL.name("tshirt_size"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>registration_app.runner.collection_place</code>.
     */
    public final TableField<RunnerRecord, String> COLLECTION_PLACE = createField(DSL.name("collection_place"), SQLDataType.VARCHAR(100), this, "");

    private Runner(Name alias, Table<RunnerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Runner(Name alias, Table<RunnerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>registration_app.runner</code> table reference
     */
    public Runner(String alias) {
        this(DSL.name(alias), RUNNER);
    }

    /**
     * Create an aliased <code>registration_app.runner</code> table reference
     */
    public Runner(Name alias) {
        this(alias, RUNNER);
    }

    /**
     * Create a <code>registration_app.runner</code> table reference
     */
    public Runner() {
        this(DSL.name("runner"), null);
    }

    public <O extends Record> Runner(Table<O> child, ForeignKey<O, RunnerRecord> key) {
        super(child, key, RUNNER);
    }

    @Override
    public Schema getSchema() {
        return RegistrationApp.REGISTRATION_APP;
    }

    @Override
    public Identity<RunnerRecord, Integer> getIdentity() {
        return (Identity<RunnerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RunnerRecord> getPrimaryKey() {
        return Keys.PK_RUNNER;
    }

    @Override
    public List<UniqueKey<RunnerRecord>> getKeys() {
        return Arrays.<UniqueKey<RunnerRecord>>asList(Keys.PK_RUNNER);
    }

    @Override
    public Runner as(String alias) {
        return new Runner(DSL.name(alias), this);
    }

    @Override
    public Runner as(Name alias) {
        return new Runner(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Runner rename(String name) {
        return new Runner(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Runner rename(Name name) {
        return new Runner(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
