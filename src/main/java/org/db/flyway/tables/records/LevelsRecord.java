/*
 * This file is generated by jOOQ.
 */
package org.db.flyway.tables.records;


import org.db.flyway.tables.Levels;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LevelsRecord extends UpdatableRecordImpl<LevelsRecord> implements Record4<Integer, String, Boolean, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>registration_app.levels.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>registration_app.levels.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>registration_app.levels.level_name</code>.
     */
    public void setLevelName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>registration_app.levels.level_name</code>.
     */
    public String getLevelName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>registration_app.levels.active</code>.
     */
    public void setActive(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>registration_app.levels.active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>registration_app.levels.category</code>.
     */
    public void setCategory(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>registration_app.levels.category</code>.
     */
    public String getCategory() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Boolean, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Boolean, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Levels.LEVELS.ID;
    }

    @Override
    public Field<String> field2() {
        return Levels.LEVELS.LEVEL_NAME;
    }

    @Override
    public Field<Boolean> field3() {
        return Levels.LEVELS.ACTIVE;
    }

    @Override
    public Field<String> field4() {
        return Levels.LEVELS.CATEGORY;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getLevelName();
    }

    @Override
    public Boolean component3() {
        return getActive();
    }

    @Override
    public String component4() {
        return getCategory();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getLevelName();
    }

    @Override
    public Boolean value3() {
        return getActive();
    }

    @Override
    public String value4() {
        return getCategory();
    }

    @Override
    public LevelsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public LevelsRecord value2(String value) {
        setLevelName(value);
        return this;
    }

    @Override
    public LevelsRecord value3(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public LevelsRecord value4(String value) {
        setCategory(value);
        return this;
    }

    @Override
    public LevelsRecord values(Integer value1, String value2, Boolean value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LevelsRecord
     */
    public LevelsRecord() {
        super(Levels.LEVELS);
    }

    /**
     * Create a detached, initialised LevelsRecord
     */
    public LevelsRecord(Integer id, String levelName, Boolean active, String category) {
        super(Levels.LEVELS);

        setId(id);
        setLevelName(levelName);
        setActive(active);
        setCategory(category);
    }
}
