/*
 * This file is generated by jOOQ.
 */
package org.db.flyway.tables;


import java.util.Arrays;
import java.util.List;

import org.db.flyway.Keys;
import org.db.flyway.RegistrationApp;
import org.db.flyway.tables.records.LevelsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Levels extends TableImpl<LevelsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>registration_app.levels</code>
     */
    public static final Levels LEVELS = new Levels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LevelsRecord> getRecordType() {
        return LevelsRecord.class;
    }

    /**
     * The column <code>registration_app.levels.id</code>.
     */
    public final TableField<LevelsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>registration_app.levels.level_name</code>.
     */
    public final TableField<LevelsRecord, String> LEVEL_NAME = createField(DSL.name("level_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>registration_app.levels.active</code>.
     */
    public final TableField<LevelsRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>registration_app.levels.category</code>.
     */
    public final TableField<LevelsRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(100), this, "");

    private Levels(Name alias, Table<LevelsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Levels(Name alias, Table<LevelsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>registration_app.levels</code> table reference
     */
    public Levels(String alias) {
        this(DSL.name(alias), LEVELS);
    }

    /**
     * Create an aliased <code>registration_app.levels</code> table reference
     */
    public Levels(Name alias) {
        this(alias, LEVELS);
    }

    /**
     * Create a <code>registration_app.levels</code> table reference
     */
    public Levels() {
        this(DSL.name("levels"), null);
    }

    public <O extends Record> Levels(Table<O> child, ForeignKey<O, LevelsRecord> key) {
        super(child, key, LEVELS);
    }

    @Override
    public Schema getSchema() {
        return RegistrationApp.REGISTRATION_APP;
    }

    @Override
    public Identity<LevelsRecord, Integer> getIdentity() {
        return (Identity<LevelsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LevelsRecord> getPrimaryKey() {
        return Keys.PK_LEVEL;
    }

    @Override
    public List<UniqueKey<LevelsRecord>> getKeys() {
        return Arrays.<UniqueKey<LevelsRecord>>asList(Keys.PK_LEVEL);
    }

    @Override
    public Levels as(String alias) {
        return new Levels(DSL.name(alias), this);
    }

    @Override
    public Levels as(Name alias) {
        return new Levels(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Levels rename(String name) {
        return new Levels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Levels rename(Name name) {
        return new Levels(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Boolean, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
